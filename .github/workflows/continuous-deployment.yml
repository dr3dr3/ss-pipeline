# Continuous deployment to target environment (GitHub repos for GitHub Pages)
name: continuous-deployment
run-name: Continuous Deployment Dispatch to ${{ inputs.deploy-target }}

on:

  workflow_call:
    inputs:
      target-ref:
        required: true
        type: string
      deploy-target:
        required: true
        type: string
        default: 'stg'
        # string must be one of:
        # 'stg' - Stage Environment
        # 'can' - Canary Environment
        # 'prd' - Production Environment

  workflow_dispatch:
    inputs:
      target-ref:
        description: 'Tag or Main'
        required: true
        default: 'main'
        type: string
      deploy-target:
        description: 'Deployment target'
        required: true
        default: 'stg'
        type: choice
        options:
        - stg
        - can
        - prd


jobs:

  # Dispatch send to trigger deployment
  dispatcher:
    name: Dispatcher
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:

      - name: Checkout 🛎️
        uses: actions/checkout@v3
        with: 
          repository: ${{ format('{0}-{1}', 'dr3dr3/devops-demo', inputs.deploy-target) }}
          ref: 'main'
          token: ${{ secrets.GHA_PAT }}

      - name: Check Paused
        id: check
        # Get issues with labels from STG/CAN/PRD repo
        env:
          GH_TOKEN: ${{ secrets.PR_MERGE }}         
        run: |
          issues="$(gh issue list --label "deploy-paused" --state open)" || 0
          echo "$issues"
          echo "CHECK=$issues" >> $GITHUB_OUTPUT

      - name: Dispatch
        if: ${{ steps.check.outputs.CHECK == 0 }}
        run: |
          curl -H "Accept: application/vnd.github.everest-preview+json" \
          -H "Authorization: token ${{ secrets.GHA_PAT }}" \
          --request POST --data '{"event_type": "deploy", "client_payload": {"paused": false, "target_ref": "${{ inputs.target-ref }}"}}' \
          https://api.github.com/repos/${{ github.repository_owner }}/${{ format('{0}-{1}', 'devops-demo', inputs.deploy-target) }}/dispatches
          echo "Success"

      - name: GitHub Step Summary - Success
        if: ${{ steps.check.outputs.CHECK == 0 }}
        run: echo "### Deploy Dispatched (${{ inputs.deploy-target }})! :thumbsup:" >> $GITHUB_STEP_SUMMARY

      - name: GitHub Step Summary - Blocked
        if: ${{ steps.check.outputs.CHECK != 0 }}
        run: echo "### Deploy Blocked (${{ inputs.deploy-target }})! :thumbsdown:" >> $GITHUB_STEP_SUMMARY