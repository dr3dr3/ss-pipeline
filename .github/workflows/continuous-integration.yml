name: CONTINUOUS-INTEGRATION

on:

  # Called from solution repo 
  workflow_call:
    inputs:
      feature:
        required: true
        type: string
      target-ref:
        required: true
        type: string
      solution:
        required: true
        type: string 

jobs:

  cicd-toggles:
    name: Toggles
    timeout-minutes: 10
    runs-on: ubuntu-latest
    outputs:
      check-links: ${{ steps.setoutput.outputs.LINKS }}
    steps:

    - name: Checkout GitOps
      uses: actions/checkout@v3
      with:
        repository: 'dr3dr3/ss-gitops'
        ref: 'main'
        token: ${{ secrets.GHA_PAT }}

    - name: Output Toggle
      id: setoutput
      run: |
        value="$(yq '.toggles.cicd.check-links.build' 'toggles.yml')" || 'ERROR'
        echo "LINKS=$value" >> $GITHUB_OUTPUT

  set-tag:
    name: 🔖 Set Tag
    timeout-minutes: 10
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.setoutput.outputs.TAG }}
    steps:
      
    - name: Output Tag
      id: setoutput
      run: |
        build="BUILD-$(date '+%Y.%m.%d.%H.%M')" || 'ERROR'
        echo "$build"
        echo "TAG=$build" >> $GITHUB_OUTPUT          

  # Build for specific solution
  build:
    name: Build
    needs: [set-tag]
    uses: ./.github/workflows/build-solutions.yml
    secrets: inherit
    with: 
      target-ref: ${{ inputs.target-ref }}
      artefact-ref: ${{ needs.set-tag.outputs.tag }}
      solution: ${{ inputs.solution }}

  ### Tests on build above

  # Test for broken hyperlinks
  check-links:
    name: 🔗 Check Links
    needs: [ cicd-toggles, set-tag, build]
    uses: ./.github/workflows/check-links.yml
    secrets: inherit
    with: 
      artefact-ref: ${{ needs.set-tag.outputs.tag }}
      toggle: ${{ needs.cicd-toggles.outputs.check-links }}

  ### Check builds ok. Is a required check on the PR (setup in GitHub). 

  build-complete:
    name: Builds 👍
    needs: [build, check-links] 
    runs-on: ubuntu-latest 
    steps:

      - name: Ready message
        run: echo "### Builds Completed :thumbsup:" >> $GITHUB_STEP_SUMMARY

  ifttt-build-success:
    name: IFTTT Build Success
    needs: [build-complete]
    uses: ./.github/workflows/notification-ifttt.yml
    secrets: inherit
    with:
      phase: build
      outcome: success

  build-failed:
    name: Builds 👎
    needs: [build, check-links] 
    if: always() && (needs.build.result == 'failure' || needs.check-links.result == 'failure')
    runs-on: ubuntu-latest 
    steps:

      - name: Ready message
        run: echo "### Builds Failed :thumbsdown:" >> $GITHUB_STEP_SUMMARY

  ifttt-build-fail:
    name: IFTTT Build Fail
    needs: [build-failed]
    uses: ./.github/workflows/notification-ifttt.yml
    secrets: inherit
    with:
      phase: build
      outcome: fail

  # Merge PR if using short-lived feature branchs
  # GitHub is setup to delete SLFB after merge completed.
  pr-merge: 
    name: PR Merge
    needs: [build-complete]
    if: ${{ github.event_name == 'ON-PR-APPROVED' }}
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Feature Branch
        uses: actions/checkout@v3

      - name: Merge Pull Request
        run: gh pr merge ${{ inputs.feature }} --squash --subject "${{ inputs.feature }}" --body "Short-lived feature branch ${{ inputs.feature }} automerged by GitHub Action" --auto
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: GitHub Step Summary
        run: echo "### PR Merge Success! :thumbsup:" >> $GITHUB_STEP_SUMMARY

  ## TAG RELEASE
  tag-release:
    name: Tag and Release
    needs: [set-tag, build-complete]
    uses: ./.github/workflows/tag-release.yml
    with:
      tag: ${{ needs.set-tag.outputs.tag }}
      target-ref: ${{ inputs.target-ref }}
      feature: ${{ inputs.feature }}
    secrets: inherit

  # Set target build in GitOps config (to be used in continuous deployment)
  build-target:
    name: Set Target Build in Config
    needs: [set-tag, build-complete]
    uses: ./.github/workflows/gitops-update.yml
    with:
      config-item: '.build.${{ inputs.solution }}'
      config-value: ${{ needs.set-tag.outputs.tag }}
    secrets: inherit

  ### Deploy to GitHub Pages in Solution Repo (considered the CI environment)

  # Deploy to GitHub
  # Note: Uses artefacts created by build jobs above
  deploy-ci:
    name: Deploy CI
    needs: [set-tag, tag-release]
    uses: ./.github/workflows/deploy-github-pages.yml
    permissions:
      contents: write
      pages: write
      id-token: write
    with:
      artefact-ref: ${{ needs.set-tag.outputs.tag }}

  ### Run CI Tests here

  ### Confirm CI Completed
  
  ci-complete:
    name: CI Complete 👍
    needs: [check-links, tag-release, build-target, deploy-ci] 
    runs-on: ubuntu-latest 
    steps:

      - name: Ready message
        run: echo "### Continuous Integration Completed :thumbsup:" >> $GITHUB_STEP_SUMMARY

  ifttt-ci-success:
    name: IFTTT CI Success
    needs: [ci-complete]
    uses: ./.github/workflows/notification-ifttt.yml
    secrets: inherit
    with:
      phase: ci
      outcome: success

  ci-failed:
    name: CI Failed 👎
    needs: [check-links, tag-release, build-target, deploy-ci] 
    if: always() && ( contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') )
    runs-on: ubuntu-latest 
    steps:

      - name: Ready message
        run: echo "### Continuous Integration Failed :thumbsdown:" >> $GITHUB_STEP_SUMMARY

  ifttt-ci-fail:
    name: IFTTT CI Failed
    needs: [ci-failed]
    uses: ./.github/workflows/notification-ifttt.yml
    secrets: inherit
    with:
      phase: ci
      outcome: fail
        
  # Set target build in GitOps config (to be used in continuous deployment)
  build-ci:
    name: Set CI Build in Config
    needs: [set-tag, ci-complete]
    uses: ./.github/workflows/gitops-update.yml
    with:
      config-item: '.deploy.ci.${{ inputs.solution }}'
      config-value: ${{ needs.set-tag.outputs.tag }}
    secrets: inherit
        
  # Dispatch to trigger deployment to Stage Environment
  dispatch-stg:
    name: Dispatch STG
    needs: [ci-complete]
    uses: ./.github/workflows/deployment-dispatch.yml
    with:
      target-deploy: 'stg'
    secrets: inherit
